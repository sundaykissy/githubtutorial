from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from marshmallow import fields
from flask_cors import CORS
from sqlalchemy import Numeric

# Initialize app and extensions
app = Flask(__name__)
CORS(app)

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:''@localhost/test'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
ma = Marshmallow(app)

# Model
class Users(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(100))
    description = db.Column(db.String(100))
    price = db.Column(db.Float, nullable=False)

    def __init__(self, name, description, price):
        self.name = name
        self.description = description
        self.price = price

# Schema
class Userschema(ma.SQLAlchemyAutoSchema):
    date = fields.String()  # Optional if you plan to add a date field
    class Meta:
        model = Users
        load_instance = True

userschema = Userschema()
users_schema = Userschema(many=True)

# Home route
@app.route("/")
def home():
    return "<p>Hello, Flask</p>"

# List all usersa
@app.route('/get-data', methods=['GET'])
def get_data():
    all_users = Users.query.all()
    results = users_schema.dump(all_users)
    return jsonify(results)

# Get single user details
@app.route('/userdetails/<id>', methods=['GET'])
def userdetails(id):
    user = Users.query.get(id)
    return userschema.jsonify(user)

# Update user
@app.route('/productUpdate/<int:id>', methods=['PUT'])
def userupdate(id):
    user = Users.query.get(id)
    name = request.json.get('name')
    description = request.json.get('description')
    price = request.json.get('price')

    user.name = name
    user.description = description
    user.price = price

    db.session.commit()
    return userschema.jsonify(user)

# Delete user
@app.route('/userdelete/<int:id>', methods=['DELETE'])
def userdelete(id):
    user = Users.query.get(id)
    db.session.delete(user)
    db.session.commit()
    return userschema.jsonify(user)

# Add new user
@app.route('/submit-form', methods=['POST'])
def submit_form():
    name = request.json.get('name')
    description = request.json.get('description')
    price = request.json.get('price')

    if not all([name, description, price]):
        return jsonify({"error": "All fields (name, description, price) are required"}), 400

    user = Users(name, description, float(price))  # Ensure price is a float
    db.session.add(user)
    db.session.commit()
    return userschema.jsonify(user)


# Run app
if __name__ == "__main__":
    app.run(debug=True)
